name: Release Management

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      build_type:
        description: 'Build type'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - alpha
          - rc

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for git info
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test version detection
      run: |
        python -c "
        from version import get_version_info, get_git_info
        import json
        print('Version Info:')
        print(json.dumps(get_version_info(), indent=2))
        print('Git Info:')
        print(json.dumps(get_git_info(), indent=2))
        "
    
    - name: Run tests (if available)
      run: |
        if [ -f pytest.ini ]; then
          pip install pytest
          pytest -v --tb=short
        else
          echo "No tests configured, skipping"
        fi
      continue-on-error: true

  auto-release:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Check for release keywords
      id: check_keywords
      run: |
        # Get the latest commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Commit message: $COMMIT_MSG"
        
        # Check for release keywords
        if echo "$COMMIT_MSG" | grep -qE "^(feat|feature)(\(.+\))?!:"; then
          echo "type=major" >> $GITHUB_OUTPUT
          echo "found=true" >> $GITHUB_OUTPUT
        elif echo "$COMMIT_MSG" | grep -qE "^(feat|feature)(\(.+\))?:"; then
          echo "type=minor" >> $GITHUB_OUTPUT
          echo "found=true" >> $GITHUB_OUTPUT
        elif echo "$COMMIT_MSG" | grep -qE "^(fix|bug)(\(.+\))?:"; then
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "found=true" >> $GITHUB_OUTPUT
        elif echo "$COMMIT_MSG" | grep -qE "^release:"; then
          # Manual release trigger
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "found=true" >> $GITHUB_OUTPUT
        else
          echo "found=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create automatic release
      if: steps.check_keywords.outputs.found == 'true'
      run: |
        python release.py ${{ steps.check_keywords.outputs.type }} --build-type stable
        
        # Get the new version
        NEW_VERSION=$(python -c "from version import get_version_string; print(get_version_string())")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Create GitHub Release
      if: steps.check_keywords.outputs.found == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: HomeNetMon v${{ env.NEW_VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  manual-release:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Create manual release
      run: |
        python release.py ${{ github.event.inputs.release_type }} --build-type ${{ github.event.inputs.build_type }}
        
        # Get the new version
        NEW_VERSION=$(python -c "from version import get_version_string; print(get_version_string())")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: HomeNetMon v${{ env.NEW_VERSION }}
        body_path: CHANGELOG.md
        draft: ${{ github.event.inputs.build_type != 'stable' }}
        prerelease: ${{ github.event.inputs.build_type != 'stable' }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version info
      id: version
      run: |
        VERSION=$(python -c "from version import get_version_string; print(get_version_string())")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "short_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/homenetmon:latest
          ghcr.io/${{ github.repository_owner }}/homenetmon:${{ steps.version.outputs.version }}
          ghcr.io/${{ github.repository_owner }}/homenetmon:${{ steps.version.outputs.short_sha }}
        labels: |
          org.opencontainers.image.title=HomeNetMon
          org.opencontainers.image.description=Comprehensive Home Network Monitoring Solution
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}