# Default values for HomeNetMon
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
replicaCount: 3

image:
  registry: docker.io
  repository: homenetmon/homenetmon
  tag: "latest"
  pullPolicy: IfNotPresent
  pullSecrets: []

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "5000"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    add:
    - NET_RAW  # Required for ping functionality
    - NET_ADMIN  # Required for network monitoring
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 80
  annotations: {}

# External service for LoadBalancer
externalService:
  enabled: false
  type: LoadBalancer
  port: 80
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: homenetmon.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: homenetmon-tls
      hosts:
        - homenetmon.local

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Node selection and affinity
nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - homenetmon
        topologyKey: kubernetes.io/hostname

# Persistence configuration
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# Log persistence
logPersistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteMany
  size: 20Gi

# Application configuration
config:
  # Network settings
  networkRange: "192.168.1.0/24"
  pingInterval: 60
  discoveryInterval: 300
  
  # Monitoring settings
  monitoringEnabled: true
  realTimeUpdates: true
  maxMonitoredDevices: 1000
  
  # API settings
  apiRateLimit: 1000
  apiBurstLimit: 100
  enableApiCompression: true
  
  # Feature flags
  enablePushNotifications: true
  enableRemoteAccess: true
  enableAnalytics: true
  enableMultiTenancy: false
  
  # Logging
  logLevel: "INFO"
  logFormat: "json"
  logRetentionDays: 30
  
  # Security
  secureHeaders: true
  csrfProtection: true
  rateLimiting: true
  
  # Performance
  workerProcesses: 4
  workerConnections: 1000
  keepaliveTimeout: 65

# Secrets configuration
secrets:
  # Application secrets
  secretKey: ""  # Auto-generated if empty
  jwtSecretKey: ""  # Auto-generated if empty
  
  # Database
  databasePassword: ""
  
  # SMTP
  smtpPassword: ""
  smtpUsername: ""
  smtpServer: "smtp.gmail.com"
  smtpPort: "587"
  
  # External integrations
  webhookSecret: ""
  notificationApiKey: ""
  
  # Remote access
  vpnPsk: ""
  tunnelAuthToken: ""
  
  # Encryption
  encryptionKey: ""

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "homenetmon-redis"
  master:
    persistence:
      enabled: true
      size: 5Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

# PostgreSQL configuration (alternative to SQLite for production)
postgresql:
  enabled: false
  auth:
    enablePostgresUser: true
    postgresPassword: "homenetmon-postgres"
    username: "homenetmon"
    password: "homenetmon-db"
    database: "homenetmon"
  primary:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1000m"

# Nginx sidecar configuration
nginx:
  enabled: true
  image:
    registry: docker.io
    repository: nginx
    tag: "1.24-alpine"
  resources:
    requests:
      memory: "64Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "200m"
  config:
    gzipEnabled: true
    rateLimitEnabled: true
    securityHeaders: true

# Monitoring and observability
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
  prometheusRule:
    enabled: true
  grafanaDashboard:
    enabled: true

# Network policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# Backup configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: "30d"
  s3:
    bucket: ""
    region: ""
    accessKey: ""
    secretKey: ""

# External dependencies
certManager:
  enabled: false

# Development/testing options
development:
  enabled: false
  debugMode: false
  hotReload: false