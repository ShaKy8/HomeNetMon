apiVersion: v1
kind: Secret
metadata:
  name: {{ include "homenetmon.fullname" . }}-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "homenetmon.labels" . | nindent 4 }}
    app.kubernetes.io/component: secrets
  annotations:
    {{- include "homenetmon.commonAnnotations" . | nindent 4 }}
type: Opaque
data:
  # Application Secrets
  SECRET_KEY: {{ include "homenetmon.secretKey" . | b64enc | quote }}
  JWT_SECRET_KEY: {{ include "homenetmon.jwtSecretKey" . | b64enc | quote }}
  
  {{- if .Values.postgresql.enabled }}
  # Database Configuration
  DATABASE_PASSWORD: {{ .Values.postgresql.auth.password | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.redis.enabled }}
  # Redis Configuration
  REDIS_PASSWORD: {{ .Values.redis.auth.password | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.smtpPassword }}
  # SMTP Configuration
  SMTP_PASSWORD: {{ .Values.secrets.smtpPassword | b64enc | quote }}
  SMTP_USERNAME: {{ .Values.secrets.smtpUsername | b64enc | quote }}
  SMTP_SERVER: {{ .Values.secrets.smtpServer | b64enc | quote }}
  SMTP_PORT: {{ .Values.secrets.smtpPort | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.webhookSecret }}
  # API Keys and Webhooks
  WEBHOOK_SECRET: {{ .Values.secrets.webhookSecret | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.notificationApiKey }}
  NOTIFICATION_API_KEY: {{ .Values.secrets.notificationApiKey | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.vpnPsk }}
  # Remote Access
  VPN_PSK: {{ .Values.secrets.vpnPsk | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.tunnelAuthToken }}
  TUNNEL_AUTH_TOKEN: {{ .Values.secrets.tunnelAuthToken | b64enc | quote }}
  {{- end }}
  
  # Encryption Keys
  ENCRYPTION_KEY: {{ include "homenetmon.encryptionKey" . | quote }}

{{- if .Values.ingress.enabled and .Values.ingress.tls }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "homenetmon.fullname" . }}-tls
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "homenetmon.labels" . | nindent 4 }}
    app.kubernetes.io/component: tls
  annotations:
    {{- include "homenetmon.commonAnnotations" . | nindent 4 }}
    {{- if .Values.certManager.enabled }}
    cert-manager.io/cluster-issuer: {{ .Values.ingress.annotations."cert-manager.io/cluster-issuer" | default "letsencrypt-prod" }}
    {{- end }}
type: kubernetes.io/tls
data:
  # These will be populated by cert-manager if enabled
  # Otherwise, you need to provide the actual certificates
  tls.crt: ""
  tls.key: ""
{{- end }}

{{- if .Values.image.pullSecrets }}
---
{{- range .Values.image.pullSecrets }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ . }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "homenetmon.labels" $ | nindent 4 }}
    app.kubernetes.io/component: registry
  annotations:
    {{- include "homenetmon.commonAnnotations" $ | nindent 4 }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ printf "{\"auths\":{}}" | b64enc }}
---
{{- end }}
{{- end }}