#!/usr/bin/env python3
"""
Vulnerability Scanner for HomeNetMon
Performs basic security vulnerability assessment
"""

import requests
import ssl
import socket
from urllib.parse import urljoin
import json
from datetime import datetime

def scan_ssl_tls(hostname, port=443):
    """Scan SSL/TLS configuration"""
    try:
        context = ssl.create_default_context()
        with socket.create_connection((hostname, port)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cert = ssock.getpeercert()
                cipher = ssock.cipher()
                version = ssock.version()

                return {
                    'ssl_version': version,
                    'cipher_suite': cipher,
                    'certificate_valid': True,
                    'certificate_expires': cert.get('notAfter', 'Unknown')
                }
    except Exception as e:
        return {'error': str(e)}

def scan_security_headers(base_url):
    """Scan for security headers"""
    try:
        response = requests.get(base_url, timeout=10)
        headers = response.headers

        security_headers = {
            'Strict-Transport-Security': headers.get('Strict-Transport-Security'),
            'X-Frame-Options': headers.get('X-Frame-Options'),
            'X-Content-Type-Options': headers.get('X-Content-Type-Options'),
            'X-XSS-Protection': headers.get('X-XSS-Protection'),
            'Content-Security-Policy': headers.get('Content-Security-Policy'),
            'Referrer-Policy': headers.get('Referrer-Policy')
        }

        return security_headers
    except Exception as e:
        return {'error': str(e)}

def scan_common_vulnerabilities(base_url):
    """Scan for common web vulnerabilities"""
    vulnerabilities = []

    # Test for directory traversal
    test_paths = [
        '/../../../etc/passwd',
        '/..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
        '/.env',
        '/.git/config'
    ]

    for path in test_paths:
        try:
            response = requests.get(urljoin(base_url, path), timeout=5)
            if response.status_code == 200 and len(response.text) > 0:
                vulnerabilities.append(f"Directory traversal possible: {path}")
        except:
            pass

    # Test for exposed files
    exposed_files = [
        '/robots.txt',
        '/.env',
        '/config.py',
        '/backup.sql'
    ]

    for file_path in exposed_files:
        try:
            response = requests.get(urljoin(base_url, file_path), timeout=5)
            if response.status_code == 200:
                vulnerabilities.append(f"Exposed file: {file_path}")
        except:
            pass

    return vulnerabilities

def run_vulnerability_scan(target_url):
    """Run complete vulnerability scan"""
    print(f"🔍 Running vulnerability scan on {target_url}")

    results = {
        'timestamp': datetime.now().isoformat(),
        'target': target_url,
        'ssl_tls': {},
        'security_headers': {},
        'vulnerabilities': []
    }

    # SSL/TLS scan
    try:
        hostname = target_url.replace('https://', '').replace('http://', '').split('/')[0]
        results['ssl_tls'] = scan_ssl_tls(hostname)
    except Exception as e:
        results['ssl_tls'] = {'error': str(e)}

    # Security headers scan
    results['security_headers'] = scan_security_headers(target_url)

    # Vulnerability scan
    results['vulnerabilities'] = scan_common_vulnerabilities(target_url)

    return results

if __name__ == "__main__":
    import sys

    target = sys.argv[1] if len(sys.argv) > 1 else "http://localhost"
    results = run_vulnerability_scan(target)

    print(json.dumps(results, indent=2))
