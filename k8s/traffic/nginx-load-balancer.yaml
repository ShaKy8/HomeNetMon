# HomeNetMon NGINX Load Balancer Configuration
# Alternative load balancing solution for non-Istio deployments

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: homenetmon
  labels:
    app.kubernetes.io/name: homenetmon
    app.kubernetes.io/component: nginx-config
    app.kubernetes.io/part-of: homenetmon
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging format
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';

        access_log /var/log/nginx/access.log main;

        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 10M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            application/atom+xml
            application/geo+json
            application/javascript
            application/x-javascript
            application/json
            application/ld+json
            application/manifest+json
            application/rdf+xml
            application/rss+xml
            application/xhtml+xml
            application/xml
            font/eot
            font/otf
            font/ttf
            image/svg+xml
            text/css
            text/javascript
            text/plain
            text/xml;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/m;
        limit_req_zone $binary_remote_addr zone=general:10m rate=100r/s;

        # Connection limiting
        limit_conn_zone $binary_remote_addr zone=perip:10m;
        limit_conn_zone $server_name zone=perserver:10m;

        # Upstream backend servers
        upstream homenetmon_backend {
            least_conn;
            
            # Primary application servers
            server homenetmon-app-0.homenetmon-service.homenetmon.svc.cluster.local:5000 max_fails=3 fail_timeout=30s weight=3;
            server homenetmon-app-1.homenetmon-service.homenetmon.svc.cluster.local:5000 max_fails=3 fail_timeout=30s weight=3;
            server homenetmon-app-2.homenetmon-service.homenetmon.svc.cluster.local:5000 max_fails=3 fail_timeout=30s weight=2;
            
            # Health check
            keepalive 32;
        }

        upstream homenetmon_api {
            ip_hash;  # Session affinity for API
            
            server homenetmon-app-0.homenetmon-service.homenetmon.svc.cluster.local:5000 max_fails=2 fail_timeout=15s;
            server homenetmon-app-1.homenetmon-service.homenetmon.svc.cluster.local:5000 max_fails=2 fail_timeout=15s;
            server homenetmon-app-2.homenetmon-service.homenetmon.svc.cluster.local:5000 max_fails=2 fail_timeout=15s;
            
            keepalive 16;
        }

        upstream homenetmon_websocket {
            # Sticky sessions for WebSocket
            hash $remote_addr consistent;
            
            server homenetmon-app-0.homenetmon-service.homenetmon.svc.cluster.local:5000;
            server homenetmon-app-1.homenetmon-service.homenetmon.svc.cluster.local:5000;
            
            keepalive 8;
        }

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; img-src 'self' data: https:; font-src 'self' https://cdnjs.cloudflare.com; connect-src 'self' wss: ws:;" always;

        # Main server block
        server {
            listen 80;
            listen [::]:80;
            server_name homenetmon.local *.homenetmon.local;
            
            # Redirect HTTP to HTTPS
            return 301 https://$server_name$request_uri;
        }

        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name homenetmon.local *.homenetmon.local;

            # SSL configuration
            ssl_certificate /etc/nginx/certs/tls.crt;
            ssl_certificate_key /etc/nginx/certs/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            ssl_session_cache shared:SSL:10m;
            ssl_session_timeout 10m;

            # Connection limits
            limit_conn perip 10;
            limit_conn perserver 1000;

            # WebSocket support for real-time updates
            location /socket.io/ {
                limit_req zone=general burst=20 nodelay;
                
                proxy_pass http://homenetmon_websocket;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                
                # WebSocket timeouts
                proxy_connect_timeout 7d;
                proxy_send_timeout 7d;
                proxy_read_timeout 7d;
            }

            # API endpoints with enhanced rate limiting
            location /api/ {
                limit_req zone=api burst=50 nodelay;
                
                # API-specific headers
                add_header X-API-Version "v1" always;
                add_header X-RateLimit-Limit "600" always;
                add_header X-RateLimit-Remaining "599" always;
                
                proxy_pass http://homenetmon_api;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # API timeouts
                proxy_connect_timeout 30s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
                
                # Health check
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            }

            # Authentication endpoints with strict rate limiting
            location ~* ^/(login|register|reset-password) {
                limit_req zone=login burst=5 nodelay;
                
                proxy_pass http://homenetmon_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Static assets with caching
            location /static/ {
                proxy_pass http://homenetmon_backend;
                proxy_set_header Host $host;
                
                # Aggressive caching for static assets
                proxy_cache_valid 200 1y;
                proxy_cache_valid 404 1m;
                expires 1y;
                add_header Cache-Control "public, immutable";
                
                # Compression for text assets
                location ~* \.(css|js|html|xml|txt)$ {
                    gzip_static on;
                }
            }

            # Main application
            location / {
                limit_req zone=general burst=100 nodelay;
                
                proxy_pass http://homenetmon_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Application timeouts
                proxy_connect_timeout 10s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                
                # Health check and failover
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            }

            # Health check endpoint
            location /health {
                access_log off;
                proxy_pass http://homenetmon_backend;
                proxy_set_header Host $host;
                proxy_connect_timeout 5s;
                proxy_send_timeout 5s;
                proxy_read_timeout 5s;
            }

            # Security.txt
            location /.well-known/security.txt {
                return 200 "Contact: security@homenetmon.local\nExpires: 2025-12-31T23:59:59.000Z\nPreferred-Languages: en\n";
                add_header Content-Type text/plain;
            }
        }

        # Status server for monitoring
        server {
            listen 8080;
            server_name localhost;
            
            location /nginx_status {
                stub_status on;
                access_log off;
                allow 127.0.0.1;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
            }
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-load-balancer
  namespace: homenetmon
  labels:
    app.kubernetes.io/name: nginx-load-balancer
    app.kubernetes.io/component: load-balancer
    app.kubernetes.io/part-of: homenetmon
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-load-balancer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-load-balancer
        app.kubernetes.io/component: load-balancer
        app.kubernetes.io/part-of: homenetmon
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        - containerPort: 8080
          name: status
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: tls-certs
          mountPath: /etc/nginx/certs
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /nginx_status
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /nginx_status
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: tls-certs
        secret:
          secretName: homenetmon-tls

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-load-balancer
  namespace: homenetmon
  labels:
    app.kubernetes.io/name: nginx-load-balancer
    app.kubernetes.io/component: load-balancer
    app.kubernetes.io/part-of: homenetmon
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 443
    targetPort: https
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/name: nginx-load-balancer