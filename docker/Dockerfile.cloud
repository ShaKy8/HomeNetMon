# Multi-stage Dockerfile optimized for cloud deployment
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gnupg2 \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# ============================================================================
# Development stage
# ============================================================================
FROM base as development

# Install development dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    git \
    vim \
    net-tools \
    iputils-ping \
    nmap \
    tcpdump \
    && rm -rf /var/lib/apt/lists/*

# Install Python development dependencies
COPY requirements.txt /tmp/requirements.txt
COPY requirements-dev.txt /tmp/requirements-dev.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt -r /tmp/requirements-dev.txt

# Create non-root user for development
RUN groupadd -r appuser && useradd -r -g appuser -u 1000 appuser

# Set up development environment
WORKDIR /app
COPY . /app/
RUN chown -R appuser:appuser /app

# Development ports
EXPOSE 5000 5678

USER appuser

# Development command with hot reload
CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=5000", "--reload", "--debugger"]

# ============================================================================
# Build stage
# ============================================================================
FROM base as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir --user -r /tmp/requirements.txt

# ============================================================================
# Production stage
# ============================================================================
FROM base as production

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    iputils-ping \
    nmap \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python packages from builder
COPY --from=builder /root/.local /root/.local

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser -u 1000 appuser \
    && mkdir -p /app/data /app/logs /app/cache /app/static \
    && chown -R appuser:appuser /app

# Set up PATH to include user packages
ENV PATH=/root/.local/bin:$PATH

# Copy application code
WORKDIR /app
COPY --chown=appuser:appuser . /app/

# Remove development files
RUN rm -rf tests/ docs/ *.md requirements-dev.txt .git/ \
    && find . -type f -name "*.pyc" -delete \
    && find . -type d -name "__pycache__" -delete

# Set proper permissions
RUN chmod +x /app/*.sh || true

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Security: Run as non-root user
USER appuser

# Expose application port
EXPOSE 5000

# Production command
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "--worker-class", "gevent", "--worker-connections", "1000", "--max-requests", "1000", "--max-requests-jitter", "100", "--preload", "--access-logfile", "-", "--error-logfile", "-", "app:app"]

# ============================================================================
# Cloud-native stage with observability
# ============================================================================
FROM production as cloud

# Install cloud-native tools
RUN apt-get update && apt-get install -y \
    jq \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Add observability agents
USER root

# Install OpenTelemetry instrumentation
RUN pip install --no-cache-dir \
    opentelemetry-api \
    opentelemetry-sdk \
    opentelemetry-instrumentation-flask \
    opentelemetry-instrumentation-requests \
    opentelemetry-instrumentation-sqlite3 \
    opentelemetry-exporter-jaeger \
    opentelemetry-exporter-prometheus \
    opentelemetry-propagator-b3 \
    opentelemetry-propagator-jaeger

# Install Prometheus client
RUN pip install --no-cache-dir prometheus-client

# Install structured logging
RUN pip install --no-cache-dir structlog

# Copy cloud configuration
COPY --chown=appuser:appuser cloud_config.py /app/cloud_config.py
COPY --chown=appuser:appuser observability/ /app/observability/

# Environment variables for cloud deployment
ENV OTEL_SERVICE_NAME=homenetmon \
    OTEL_SERVICE_VERSION=1.0.0 \
    OTEL_RESOURCE_ATTRIBUTES="service.name=homenetmon,service.version=1.0.0" \
    PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc \
    STRUCTLOG_CONFIGURE=true

# Create prometheus metrics directory
RUN mkdir -p /tmp/prometheus_multiproc && chown appuser:appuser /tmp/prometheus_multiproc

USER appuser

# Cloud-native startup script
COPY --chown=appuser:appuser docker/start-cloud.sh /app/start-cloud.sh
RUN chmod +x /app/start-cloud.sh

CMD ["/app/start-cloud.sh"]

# ============================================================================
# Debug stage for troubleshooting
# ============================================================================
FROM cloud as debug

USER root

# Install debugging tools
RUN apt-get update && apt-get install -y \
    strace \
    ltrace \
    gdb \
    valgrind \
    htop \
    iotop \
    tcpdump \
    netstat-nat \
    lsof \
    && rm -rf /var/lib/apt/lists/*

# Install Python debugging tools
RUN pip install --no-cache-dir \
    py-spy \
    memory-profiler \
    line-profiler \
    pdb-clone \
    remote-pdb

USER appuser

# Debug command
CMD ["python", "-m", "pdb", "app.py"]